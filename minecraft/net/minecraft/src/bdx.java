package net.minecraft.src;

import net.minecraft.world.biome.BiomeColorHelper;
import net.minecraft.world.biome.BiomeDesert;
import net.minecraft.world.biome.BiomeForestMutated;
import net.minecraft.world.biome.BiomeMushroomIsland;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.GenLayerHills;

public class bdx extends GenLayerHills
{
    public bdx(long rand, GenLayerHills z)
    {
        super(rand);
        this.a = z;
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int areaX, int areaY, int areaWidth, int areaHeight)
    {
        int[] aint = this.a.getInts(areaX - 1, areaY - 1, areaWidth + 2, areaHeight + 2);
        int[] aint1 = GenLayer.a(areaWidth * areaHeight);

        for (int i = 0; i < areaHeight; ++i)
        {
            for (int j = 0; j < areaWidth; ++j)
            {
                this.a((long)(j + areaX), (long)(i + areaY));
                int k = aint[j + 1 + (i + 1) * (areaWidth + 2)];
                BiomeColorHelper biomecolorhelper = BiomeColorHelper.b(k);

                if (k == BiomeColorHelper.a(BiomeDesert.p))
                {
                    int j2 = aint[j + 1 + (i + 1 - 1) * (areaWidth + 2)];
                    int i3 = aint[j + 1 + 1 + (i + 1) * (areaWidth + 2)];
                    int l3 = aint[j + 1 - 1 + (i + 1) * (areaWidth + 2)];
                    int k4 = aint[j + 1 + (i + 1 + 1) * (areaWidth + 2)];

                    if (j2 != BiomeColorHelper.a(BiomeDesert.a) && i3 != BiomeColorHelper.a(BiomeDesert.a) && l3 != BiomeColorHelper.a(BiomeDesert.a) && k4 != BiomeColorHelper.a(BiomeDesert.a))
                    {
                        aint1[j + i * areaWidth] = k;
                    }
                    else
                    {
                        aint1[j + i * areaWidth] = BiomeColorHelper.a(BiomeDesert.q);
                    }
                }
                else if (biomecolorhelper != null && biomecolorhelper.g() == BiomeMushroomIsland.class)
                {
                    int i2 = aint[j + 1 + (i + 1 - 1) * (areaWidth + 2)];
                    int l2 = aint[j + 1 + 1 + (i + 1) * (areaWidth + 2)];
                    int k3 = aint[j + 1 - 1 + (i + 1) * (areaWidth + 2)];
                    int j4 = aint[j + 1 + (i + 1 + 1) * (areaWidth + 2)];

                    if (this.c(i2) && this.c(l2) && this.c(k3) && this.c(j4))
                    {
                        if (!b(i2) && !b(l2) && !b(k3) && !b(j4))
                        {
                            aint1[j + i * areaWidth] = k;
                        }
                        else
                        {
                            aint1[j + i * areaWidth] = BiomeColorHelper.a(BiomeDesert.r);
                        }
                    }
                    else
                    {
                        aint1[j + i * areaWidth] = BiomeColorHelper.a(BiomeDesert.y);
                    }
                }
                else if (k != BiomeColorHelper.a(BiomeDesert.e) && k != BiomeColorHelper.a(BiomeDesert.J) && k != BiomeColorHelper.a(BiomeDesert.v))
                {
                    if (biomecolorhelper != null && biomecolorhelper.p())
                    {
                        this.a(aint, aint1, j, i, areaWidth, k, BiomeColorHelper.a(BiomeDesert.B));
                    }
                    else if (k != BiomeColorHelper.a(BiomeDesert.M) && k != BiomeColorHelper.a(BiomeDesert.N))
                    {
                        if (k != BiomeColorHelper.a(BiomeDesert.a) && k != BiomeColorHelper.a(BiomeDesert.z) && k != BiomeColorHelper.a(BiomeDesert.i) && k != BiomeColorHelper.a(BiomeDesert.h))
                        {
                            int l1 = aint[j + 1 + (i + 1 - 1) * (areaWidth + 2)];
                            int k2 = aint[j + 1 + 1 + (i + 1) * (areaWidth + 2)];
                            int j3 = aint[j + 1 - 1 + (i + 1) * (areaWidth + 2)];
                            int i4 = aint[j + 1 + (i + 1 + 1) * (areaWidth + 2)];

                            if (!b(l1) && !b(k2) && !b(j3) && !b(i4))
                            {
                                aint1[j + i * areaWidth] = k;
                            }
                            else
                            {
                                aint1[j + i * areaWidth] = BiomeColorHelper.a(BiomeDesert.r);
                            }
                        }
                        else
                        {
                            aint1[j + i * areaWidth] = k;
                        }
                    }
                    else
                    {
                        int l = aint[j + 1 + (i + 1 - 1) * (areaWidth + 2)];
                        int i1 = aint[j + 1 + 1 + (i + 1) * (areaWidth + 2)];
                        int j1 = aint[j + 1 - 1 + (i + 1) * (areaWidth + 2)];
                        int k1 = aint[j + 1 + (i + 1 + 1) * (areaWidth + 2)];

                        if (!b(l) && !b(i1) && !b(j1) && !b(k1))
                        {
                            if (this.d(l) && this.d(i1) && this.d(j1) && this.d(k1))
                            {
                                aint1[j + i * areaWidth] = k;
                            }
                            else
                            {
                                aint1[j + i * areaWidth] = BiomeColorHelper.a(BiomeDesert.d);
                            }
                        }
                        else
                        {
                            aint1[j + i * areaWidth] = k;
                        }
                    }
                }
                else
                {
                    this.a(aint, aint1, j, i, areaWidth, k, BiomeColorHelper.a(BiomeDesert.A));
                }
            }
        }

        return aint1;
    }

    private void a(int[] p_a_1_, int[] p_a_2_, int p_a_3_, int p_a_4_, int p_a_5_, int p_a_6_, int p_a_7_)
    {
        if (b(p_a_6_))
        {
            p_a_2_[p_a_3_ + p_a_4_ * p_a_5_] = p_a_6_;
        }
        else
        {
            int i = p_a_1_[p_a_3_ + 1 + (p_a_4_ + 1 - 1) * (p_a_5_ + 2)];
            int j = p_a_1_[p_a_3_ + 1 + 1 + (p_a_4_ + 1) * (p_a_5_ + 2)];
            int k = p_a_1_[p_a_3_ + 1 - 1 + (p_a_4_ + 1) * (p_a_5_ + 2)];
            int l = p_a_1_[p_a_3_ + 1 + (p_a_4_ + 1 + 1) * (p_a_5_ + 2)];

            if (!b(i) && !b(j) && !b(k) && !b(l))
            {
                p_a_2_[p_a_3_ + p_a_4_ * p_a_5_] = p_a_6_;
            }
            else
            {
                p_a_2_[p_a_3_ + p_a_4_ * p_a_5_] = p_a_7_;
            }
        }
    }

    private boolean c(int p_c_1_)
    {
        if (BiomeColorHelper.b(p_c_1_) != null && BiomeColorHelper.b(p_c_1_).g() == BiomeMushroomIsland.class)
        {
            return true;
        }
        else
        {
            return p_c_1_ == BiomeColorHelper.a(BiomeDesert.y) || p_c_1_ == BiomeColorHelper.a(BiomeDesert.w) || p_c_1_ == BiomeColorHelper.a(BiomeDesert.x) || p_c_1_ == BiomeColorHelper.a(BiomeDesert.f) || p_c_1_ == BiomeColorHelper.a(BiomeDesert.g) || b(p_c_1_);
        }
    }

    private boolean d(int p_d_1_)
    {
        return BiomeColorHelper.b(p_d_1_) instanceof BiomeForestMutated;
    }
}
